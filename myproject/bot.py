import telebot
from telebot import types
from django.utils import timezone
import os
import django
import pandas as pd
from io import BytesIO

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
django.setup()
from myapp.models import Student, DanceDirection, Lesson, Subscription, SingleSession

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start_command(message):
    chat_id = message.chat.id
    user = Student.objects.filter(chat_id=chat_id).first()
    if user:
        if user.is_admin:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(
                types.KeyboardButton('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã'),
                types.KeyboardButton('üìä –û—Ç—á–µ—Ç—ã'),
                types.KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
                types.KeyboardButton('üóì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è–º–∏'),
                types.KeyboardButton('üíÉ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ —Ç–∞–Ω—Ü–∞')
            )
            bot.send_message(chat_id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(
                types.KeyboardButton('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏'),
                types.KeyboardButton('üí≥ –ú–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç'),
                types.KeyboardButton('üí≥ –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç')
            )
            bot.send_message(chat_id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç.", reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True))
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=markup)



@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    if message.contact:
        phone_number = message.contact.phone_number
        chat_id = message.chat.id
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        bot.register_next_step_handler(message, lambda msg: register_user(msg, phone_number, chat_id))

def register_user(message, phone_number, chat_id):
    full_name = message.text.strip()
    if full_name:
        Student.objects.create(full_name=full_name, phone_number=phone_number, chat_id=chat_id, created_at=timezone.now())
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏'),
            types.KeyboardButton('üóì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫'),
            types.KeyboardButton('üí≥ –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç')
        )
        bot.send_message(chat_id, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}.", reply_markup=markup)
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@bot.message_handler(func=lambda message: message.text == 'üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏')
def show_dance_directions(message):
    directions = DanceDirection.objects.all()
    if directions:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for direction in directions:
            markup.add(types.KeyboardButton(direction.name))
        markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–Ω—Ü–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, select_lesson_time)
    else:
        bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–∞–Ω—Ü–∞ –Ω–µ—Ç.")


def select_lesson_time(message):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        back_to_main_menu(message)
        return

    selected_direction = message.text
    dance_direction = DanceDirection.objects.filter(name=selected_direction).first()
    if dance_direction:
        lessons = Lesson.objects.filter(dance_direction=dance_direction)
        if lessons:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for lesson in lessons:
                lesson_info = f"{lesson.date} –≤ {lesson.time}"
                markup.add(types.KeyboardButton(lesson_info))
            markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {selected_direction}:", reply_markup=markup)
            bot.register_next_step_handler(message, lambda msg: book_lesson(msg, dance_direction))
        else:
            bot.send_message(message.chat.id, f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Ä–æ–∫–æ–≤ –ø–æ {selected_direction} –Ω–µ—Ç.")
    else:
        bot.send_message(message.chat.id, "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def book_lesson(message, dance_direction):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        show_dance_directions(message)
        return

    try:
        lesson_info = message.text.strip()

        if 'ID: ' not in lesson_info:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç —Å 'ID: '.")

        lesson_id_str = lesson_info.split('ID: ')[1].split()[0]

        lesson_id = int(lesson_id_str.replace(')', ''))

        lesson = Lesson.objects.get(id=lesson_id)
        student = Student.objects.get(chat_id=message.chat.id)
        subscription = Subscription.objects.filter(student=student, confirmed_by_admin=True).first()

        if subscription and subscription.sessions_remaining > 0:
            SingleSession.objects.create(student=student, lesson=lesson)
            subscription.sessions_remaining -= 1
            subscription.save()
            bot.send_message(message.chat.id,
                             f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {lesson.dance_direction.name} {lesson.date} –≤ {lesson.time}. –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {subscription.sessions_remaining}.")

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(
                types.KeyboardButton('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏'),
                types.KeyboardButton('üí≥ –ú–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç'),
                types.KeyboardButton('üí≥ –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç')
            )
            bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.")
    except ValueError as ve:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! {ve}")
    except Lesson.DoesNotExist:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Student.DoesNotExist:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
    except IndexError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


@bot.message_handler(func=lambda message: message.text == 'üí≥ –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç')
def buy_subscription(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        types.KeyboardButton('–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 4 –∑–∞–Ω—è—Ç–∏—è (2800 —Ä)'),
        types.KeyboardButton('–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 8 –∑–∞–Ω—è—Ç–∏–π (5300 —Ä)'),
        types.KeyboardButton('–†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ (750 —Ä)'),
        types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, process_subscription_selection)


@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
def back_to_main_menu(message):
    chat_id = message.chat.id
    user = Student.objects.filter(chat_id=chat_id).first()

    if user:
        if user.is_admin:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(
                types.KeyboardButton('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã'),
                types.KeyboardButton('üìä –û—Ç—á–µ—Ç—ã'),
                types.KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
                types.KeyboardButton('üóì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è–º–∏'),
                types.KeyboardButton('üíÉ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ —Ç–∞–Ω—Ü–∞')
            )
            bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(
                types.KeyboardButton('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏'),
                types.KeyboardButton('üí≥ –ú–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç'),
                types.KeyboardButton('üí≥ –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç')
            )
            bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)


def process_subscription_selection(message):
    student = Student.objects.get(chat_id=message.chat.id)
    if message.text == '–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 4 –∑–∞–Ω—è—Ç–∏—è (2800 —Ä)':
        subscription = Subscription.objects.create(
            student=student,
            start_date=timezone.now(),
            end_date=timezone.now() + timezone.timedelta(days=30),
            sessions_remaining=4,
            type='4 –∑–∞–Ω—è—Ç–∏–π',
            confirmed_by_admin=False
        )
        notify_admins(subscription, message)
        bot.send_message(
            message.chat.id,
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–∞ 4 –∑–∞–Ω—è—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
    elif message.text == '–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 8 –∑–∞–Ω—è—Ç–∏–π (5300 —Ä)':
        subscription = Subscription.objects.create(
            student=student,
            start_date=timezone.now(),
            end_date=timezone.now() + timezone.timedelta(days=30),
            sessions_remaining=8,
            type='8 –∑–∞–Ω—è—Ç–∏–π',
            confirmed_by_admin=False
        )
        notify_admins(subscription, message)
        bot.send_message(
            message.chat.id,
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–∞ 8 –∑–∞–Ω—è—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
    elif message.text == '–†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ (750 —Ä)':
        subscription = Subscription.objects.create(
            student=student,
            start_date=timezone.now(),
            end_date=timezone.now() + timezone.timedelta(days=1),
            sessions_remaining=1,
            type='–†–∞–∑–æ–≤–æ–µ',
            confirmed_by_admin=False
        )
        notify_admins(subscription, message)
        bot.send_message(
            message.chat.id,
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        back_to_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.")


def notify_admins(subscription, message):
    admin_users = Student.objects.filter(is_admin=True)
    for admin in admin_users:
        bot.send_message(admin.chat_id, f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –æ—Ç {subscription.student.full_name} ({subscription.student.phone_number}). –¢–∏–ø: {subscription.type}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.")


@bot.message_handler(func=lambda message: message.text == 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã')
def review_subscription_requests(message):
    admin_user = Student.objects.filter(chat_id=message.chat.id, is_admin=True).first()
    if admin_user:
        pending_subscriptions = Subscription.objects.filter(confirmed_by_admin=False)
        if pending_subscriptions.exists():
            for subscription in pending_subscriptions:
                approve_button = types.InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'approve_{subscription.id}')
                decline_button = types.InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'decline_{subscription.id}')
                markup = types.InlineKeyboardMarkup().add(approve_button, decline_button)
                bot.send_message(
                    message.chat.id,
                    f"–ó–∞–ø—Ä–æ—Å –æ—Ç {subscription.student.full_name} ({subscription.student.phone_number}): {subscription.type}",
                    reply_markup=markup
                )
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_') or call.data.startswith('decline_'))
def handle_admin_response(call):
    subscription_id = int(call.data.split('_')[1])
    subscription = Subscription.objects.get(id=subscription_id)

    if call.data.startswith('approve_'):
        subscription.confirmed_by_admin = True
        subscription.save()
        bot.send_message(call.message.chat.id, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è {subscription.student.full_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        bot.send_message(subscription.student.chat_id, f"–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç {subscription.type} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    elif call.data.startswith('decline_'):
        subscription.delete()
        bot.send_message(call.message.chat.id, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è {subscription.student.full_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
        bot.send_message(subscription.student.chat_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@bot.message_handler(func=lambda message: message.text == 'üìä –û—Ç—á–µ—Ç—ã')
def handle_reports(message):
    if Student.objects.filter(chat_id=message.chat.id, is_admin=True).exists():
        subscriptions = Subscription.objects.all()
        report_data = []
        for subscription in subscriptions:
            student = subscription.student
            lessons_attended = SingleSession.objects.filter(student=student).count()
            report_data.append({
                '–§–ò–û': student.full_name,
                '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞': student.phone_number,
                '–¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞': subscription.type,
                '–ù–∞—á–∞–ª–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞': subscription.start_date,
                '–û–∫–æ–Ω—á–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞': subscription.end_date,
                '–ó–∞–Ω—è—Ç–∏–π –æ—Å—Ç–∞–ª–æ—Å—å': subscription.sessions_remaining,
                '–ó–∞–Ω—è—Ç–∏–π –ø–æ—Å–µ—â–µ–Ω–æ': lessons_attended
            })

        df = pd.DataFrame(report_data)
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='–û—Ç—á–µ—Ç')
        output.seek(0)

        bot.send_document(message.chat.id, document=output, visible_file_name='–û—Ç—á–µ—Ç_–∑–∞–Ω—è—Ç–∏–π.xlsx')
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.message_handler(func=lambda message: message.text == 'üóì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è–º–∏')
def handle_manage_lessons(message):
    if Student.objects.filter(chat_id=message.chat.id, is_admin=True).exists():
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ', callback_data='select_direction_add_lesson'),
            types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ', callback_data='select_direction_delete_lesson'),
            types.InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è', callback_data='view_lessons')
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è–º–∏:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.message_handler(func=lambda message: message.text == 'üíÉ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ —Ç–∞–Ω—Ü–∞')
def handle_manage_dance_directions(message):
    if Student.objects.filter(chat_id=message.chat.id, is_admin=True).exists():
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='add_direction'),
            types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='select_direction_delete_direction'),
            types.InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data='view_directions')
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ —Ç–∞–Ω—Ü–∞:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


def show_dance_directions_inline(chat_id, action):
    directions = DanceDirection.objects.all()
    if directions.exists():
        markup = types.InlineKeyboardMarkup()
        for direction in directions:
            markup.add(types.InlineKeyboardButton(direction.name, callback_data=f'{action}_{direction.id}'))
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–Ω—Ü–∞:", reply_markup=markup)
    else:
        bot.send_message(chat_id, "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–∞–Ω—Ü–∞ –ø–æ–∫–∞ –Ω–µ—Ç.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_direction_') or call.data in ['add_direction', 'view_lessons', 'view_directions'])
def handle_admin_callbacks(call):
    if call.data.startswith('select_direction_add_lesson'):
        show_dance_directions_inline(call.message.chat.id, 'add_lesson')
    elif call.data.startswith('select_direction_delete_lesson'):
        show_dance_directions_inline(call.message.chat.id, 'select_delete_lesson')
    elif call.data.startswith('select_direction_delete_direction'):
        show_dance_directions_inline(call.message.chat.id, 'delete_direction')
    elif call.data == 'add_direction':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–Ω—Ü–∞.")
        bot.register_next_step_handler(call.message, process_add_dance_direction)
    elif call.data == 'view_lessons':
        view_lessons(call.message)
    elif call.data == 'view_directions':
        view_dance_directions(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('add_lesson_'))
def process_add_lesson_callback(call):
    try:
        direction_id = int(call.data.split('_')[-1].replace(')', '').strip())
        direction = DanceDirection.objects.get(id=direction_id)
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction.name}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: YYYY-MM-DD, HH:MM")
        bot.register_next_step_handler(call.message, lambda msg: save_lesson(msg, direction))
    except ValueError:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
    except DanceDirection.DoesNotExist:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞! –£–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_delete_lesson'))
def handle_select_delete_lesson(call):
    try:
        lessons = Lesson.objects.all()
        if lessons.exists():
            markup = types.InlineKeyboardMarkup()
            for lesson in lessons:
                button_text = f"{lesson.date} {lesson.time} (ID: {lesson.id})"
                markup.add(types.InlineKeyboardButton(button_text, callback_data=f'delete_lesson_confirm_{lesson.id}'))
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–ó–∞–Ω—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_lesson_confirm'))
def process_delete_lesson(call):
    try:
        lesson_id = int(call.data.split('_')[-1])
        lesson = Lesson.objects.get(id=lesson_id)
        lesson.delete()
        bot.send_message(call.message.chat.id, f"–ó–∞–Ω—è—Ç–∏–µ —Å ID {lesson_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        bot.answer_callback_query(call.id, "–ó–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    except Lesson.DoesNotExist:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞! –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞! –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è: {e}")
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_direction_'))
def process_delete_dance_direction_callback(call):
    direction_id = int(call.data.split('_')[-1])
    try:
        direction = DanceDirection.objects.get(id=direction_id)
        direction.delete()
        bot.send_message(call.message.chat.id, f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{direction.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    except DanceDirection.DoesNotExist:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞! –£–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_direction_'))
def handle_select_direction(call):
    direction_id = int(call.data.split('_')[-1])
    direction = DanceDirection.objects.get(id=direction_id)
    call.message.text = direction.name
    process_add_lesson(call.message)

def process_add_lesson(message):
    direction_name = message.text
    try:
        direction = DanceDirection.objects.get(name=direction_name)
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_name}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: YYYY-MM-DD, HH:MM")
        bot.register_next_step_handler(message, lambda msg: save_lesson(msg, direction))
    except DanceDirection.DoesNotExist:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –£–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def save_lesson(message, direction):
    try:
        date_str, time_str = message.text.split(', ')
        date = timezone.datetime.strptime(date_str, '%Y-%m-%d').date()
        time = timezone.datetime.strptime(time_str, '%H:%M').time()
        lesson = Lesson.objects.create(dance_direction=direction, date=date, time=time)
        print(f"–û—Ç–ª–∞–¥–∫–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ —Å ID {lesson.id}, direction_id={lesson.dance_direction.id}")
        bot.send_message(message.chat.id, f"–ó–∞–Ω—è—Ç–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{direction.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {date} –≤ {time}.")
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.")


def view_lessons(message):
    lessons = Lesson.objects.all()
    if lessons.exists():
        response = "–í—Å–µ –∑–∞–Ω—è—Ç–∏—è:\n"
        for lesson in lessons:
            response += f"ID: {lesson.id}, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {lesson.dance_direction.name}, –î–∞—Ç–∞: {lesson.date}, –í—Ä–µ–º—è: {lesson.time}\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–ó–∞–Ω—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")


def process_add_dance_direction(message):
    name = message.text.strip()
    if name:
        DanceDirection.objects.create(name=name)
        bot.send_message(message.chat.id, f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")


def view_dance_directions(message):
    directions = DanceDirection.objects.all()
    if directions.exists():
        response = "–í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–Ω—Ü–∞:\n"
        for direction in directions:
            response += f"{direction.name}\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–∞–Ω—Ü–∞ –ø–æ–∫–∞ –Ω–µ—Ç.")


def process_delete_dance_direction(message):
    direction_name = message.text.strip()
    try:
        direction = DanceDirection.objects.get(name=direction_name)
        direction.delete()
        bot.send_message(message.chat.id, f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{direction_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    except DanceDirection.DoesNotExist:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –£–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@bot.message_handler(func=lambda message: message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def handle_view_schedule(message):
    if Student.objects.filter(chat_id=message.chat.id, is_admin=True).exists():
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton('–ù–∞ –¥–µ–Ω—å', callback_data='schedule_day'),
            types.InlineKeyboardButton('–ù–∞ –Ω–µ–¥–µ–ª—é', callback_data='schedule_week'),
            types.InlineKeyboardButton('–ù–∞ –º–µ—Å—è—Ü', callback_data='schedule_month')
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.callback_query_handler(func=lambda call: call.data in ['schedule_day', 'schedule_week', 'schedule_month'])
def show_schedule(call):
    from datetime import datetime, timedelta

    today = timezone.now().date()

    if call.data == 'schedule_day':
        start_date = today
        end_date = today
        period = '–¥–µ–Ω—å'
        period_emoji = 'üìÖ'
    elif call.data == 'schedule_week':
        start_date = today
        end_date = today + timedelta(days=6)
        period = '–Ω–µ–¥–µ–ª—é'
        period_emoji = 'üóì'
    elif call.data == 'schedule_month':
        start_date = today
        end_date = (today + timedelta(days=30)).replace(day=1) - timedelta(days=1)
        period = '–º–µ—Å—è—Ü'
        period_emoji = 'üìÜ'

    lessons = Lesson.objects.filter(date__range=[start_date, end_date]).order_by('date', 'time')

    if lessons.exists():
        response = f"{period_emoji} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {period} (—Å {start_date} –ø–æ {end_date}):\n"
        for lesson in lessons:
            lesson_time = lesson.time.strftime('%H:%M')
            participants = SingleSession.objects.filter(lesson=lesson).select_related('student')

            if participants.exists():
                participant_names = ', '.join([participant.student.full_name for participant in participants])
                response += f"üïí {lesson.date} {lesson_time} - {lesson.dance_direction.name} üíÉ\n"
                response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {participant_names}\n"
            else:
                response += f"üïí {lesson.date} {lesson_time} - {lesson.dance_direction.name} üíÉ\n"
                response += "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç\n"
    else:
        response = f"–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ({period})."

    bot.send_message(call.message.chat.id, response)
    bot.answer_callback_query(call.id)


@bot.message_handler(func=lambda message: message.text == 'üí≥ –ú–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç')
def show_subscription_info(message):
    chat_id = message.chat.id
    student = Student.objects.filter(chat_id=chat_id).first()

    if student:
        subscription = Subscription.objects.filter(student=student, confirmed_by_admin=True).first()
        if subscription:
            response = (f"üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ:\n"
                        f"–¢–∏–ø: {subscription.type}\n"
                        f"–ù–∞—á–∞–ª–æ: {subscription.start_date}\n"
                        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {subscription.end_date}\n"
                        f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–Ω—è—Ç–∏—è: {subscription.sessions_remaining}\n")
        else:
            response = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."
    else:
        response = "–û—à–∏–±–∫–∞! –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."

    bot.send_message(chat_id, response)


bot.polling(none_stop=True)

